module Test.QuickCheckTest;

import Stdlib.Prelude open;
import Data.List open;
import Data.String open;
import Test.QuickCheck open public;

import Stdlib.Debug.Fail as Fail;

-- | The data defining a QuickCheck test
type Test :=
  test {
    name : String;
    property : Property
  };

mkTest
  {Predicate : Type}
  {{Testable Predicate}}
  (name : String)
  (predicate : Predicate)
  : Test := test name (Testable.toProp predicate);

type TestOutcome :=
  testOutcome {
    name : String;
    outcome : Outcome
  };

allTestSuccess (ts : List TestOutcome) : Bool :=
  allSuccess (map TestOutcome.outcome ts);

showTestOutcome (outcome : TestOutcome) : String :=
  "'"
    ++str TestOutcome.name outcome
    ++str "': "
    ++str showOutcome (TestOutcome.outcome outcome);

runTest : Nat -> Nat -> Test -> TestOutcome
  | attemptNum seed (test name p) :=
    testOutcome name (quickcheck attemptNum seed p);

runTests : Nat -> Nat -> List Test -> List TestOutcome
  | attemptNum startSeed ts :=
    let
      numTests : Nat := length ts;
      testSeeds : List Nat :=
        map (n in rangeStep attemptNum numTests)
          startSeed + n;
    in zipWith (runTest attemptNum) testSeeds ts;

runTestsIO : Nat -> Nat -> List Test -> IO
  | attemptNum startSeed ts :=
    let
      outcomes : List TestOutcome :=
        runTests attemptNum startSeed ts;
    in printStringLn (lines (map showTestOutcome outcomes))
      >>> ite
        (allTestSuccess outcomes)
        (printStringLn "All tests passed")
        (Fail.failwith "Test failed");
