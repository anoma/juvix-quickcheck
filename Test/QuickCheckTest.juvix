module Test.QuickCheckTest;

import Stdlib.Prelude open;
import Data.List open;
import Data.String open;
import Test.QuickCheck open public;

import Stdlib.Debug.Fail as Fail;

-- | The data defining a QuickCheck test
type Test :=
  test {
    name : String;
    property : Property
  };

mkTest
  {Predicate : Type}
  {{Testable Predicate}}
  (name : String)
  (predicate : Predicate)
  : Test := test name (Testable.toProp predicate);

type TestResult :=
  testResult {
    name : String;
    result : Result
  };

allTestSuccess (ts : List TestResult) : Bool :=
  allSuccess (map TestResult.result ts);

showTestResult (result : TestResult) : String :=
  "'"
    ++str TestResult.name result
    ++str "': "
    ++str showResult (TestResult.result result);

runTest : Nat -> Nat -> Test -> TestResult
  | attemptNum seed (test name p) :=
    testResult name (quickcheck attemptNum seed p);

runTests : Nat -> Nat -> List Test -> List TestResult
  | attemptNum startSeed ts :=
    let
      numTests : Nat := length ts;
      testSeeds : List Nat :=
        map (n in rangeStep attemptNum numTests)
          startSeed + n;
    in zipWith (runTest attemptNum) testSeeds ts;

runTestsIO : Nat -> Nat -> List Test -> IO
  | attemptNum startSeed ts :=
    let
      results : List TestResult :=
        runTests attemptNum startSeed ts;
    in printStringLn (lines (map showTestResult results))
      >>> ite
        (allTestSuccess results)
        (printStringLn "All tests passed")
        (Fail.failwith "Test failed");
