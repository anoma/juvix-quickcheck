module Test.QuickCheck;

import Stdlib.Prelude open;
import Data.List open;
import Data.Monoid open;
import Data.Random open;
import Test.QuickCheck.Property open public;
import Test.QuickCheck.Result open public;
import Test.QuickCheck.Testable open public;
import Test.QuickCheck.Fun open public;

quickcheck {Predicate : Type} {{Testable Predicate}}
  : Nat -> Nat -> Predicate -> Result
  | attemptNum startSeed predicate :=
    let
      seeds : List Nat :=
        map (n in range attemptNum)
          startSeed + n;
      runOne (prop : Property) (seed : Nat) : Result :=
        let
          result : Result := runProp prop (mkStdGen seed);
        in overFailure result \ {(failure _ cs) := failure seed cs};
      runAll (prop : Property) : Result :=
        foldMap monoidResult (runOne prop) seeds;
    in runAll (Testable.toProp predicate);
