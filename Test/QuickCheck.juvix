module Test.QuickCheck;

open import Data.Random using {StdGen;stdSplit;mkStdGen;stdNext;randBool};
open import Stdlib.Prelude hiding {+;mod};

import Stdlib.Data.Nat as Nat;
import Stdlib.Data.Nat.Ord as Nat;

open import Stdlib.Data.Int.Ord;
open import Stdlib.Data.Int;

type Monoid (A : Type) :=
  | monoid : A -> (A -> A -> A) -> Monoid A;

type Result :=
  | success : Result
  | failure : Nat -> List String -> Result;

concat : List String → String;
concat := foldl (++str) "";

intercalate : String → List String → String;
intercalate sep xs := concat (intersperse sep xs);

showResult : Result -> String;
showResult success := "success";
showResult (failure seed cs) :=
  "failure "
    ++str "(seed : "
    ++str natToString seed
    ++str " , counterExamples: "
    ++str ("[" ++str intercalate ", " cs ++str "]")
    ++str ")";

foldMap :
  {A : Type}
    -> {M : Type}
    -> Monoid M
    -> (A -> M)
    -> List A
    -> M;
foldMap (monoid mempty mappend) f :=
  foldr (mappend ∘ f) mempty;

monoidResult : Monoid Result;
monoidResult :=
  monoid
    success
    \ {
      | x@(failure _ _) _ := x
      | _ y := y
    };

overFailure : Result -> (Result -> Result) -> Result;
overFailure success _ := success;
overFailure x f := f x;

terminating
undefined : {A : Type} -> A;
undefined := undefined;

-- | A generator of values of type A
type Gen (A : Type) :=
  | gen : (StdGen -> A) -> Gen A;

-- | A generator associated with a type A
type Arbitrary (A : Type) :=
  | arbitrary : Gen A -> Arbitrary A;

-- | A testable predicate from which we can obtain a $Gen Result$
type Property :=
  | property : Gen Result -> Property;

-- | A conversion from a Type A to a Property
type Testable (A : Type) :=
  | testable : (A -> Property) -> Testable A;

type Showable (A : Type) :=
  | showable : (A -> String) -> Showable A;

arbitraryInt : Arbitrary Int;
arbitraryInt :=
  arbitrary
    (gen
      \ {
        | rand := let
          runRand : Nat × StdGen := stdNext rand;
          n : Nat := fst runRand;
          isPos : Bool := fst (randBool (snd runRand));
        in if isPos (ofNat n) (negSuc n)
      });

showableBool : Showable Bool;
showableBool :=
  showable
    \ {
      | true := "true"
      | false := "false"
    };

showableInt : Showable Int;
showableInt := showable intToString;

showableNat : Showable Nat;
showableNat := showable natToString;

runProp : Property -> StdGen -> Result;
runProp (property (gen runGen)) rand := runGen rand;

toProp : {A : Type} -> Testable A -> A -> Property;
toProp (testable f) := f;

testableProperty : Testable Property;
testableProperty := testable id;

testableResult : Testable Result;
testableResult :=
  testable
    \ {
      | r := property (gen (const r))
    };

testableBool : Testable Bool;
testableBool :=
  let
    toResult : Bool -> Result;
    toResult b := if b success (failure 0 nil);
  in testable
    \ {
      | b := toProp testableResult (toResult b)
    };

forAll :
  {A : Type}
    -> {T : Type}
    -> Showable A
    -> Testable T
    -> Gen A
    -> (A -> T)
    -> Property;
forAll {A} {T} (showable show) (testable asProp) (gen runGen) prop :=
  property
    (gen
      \ {
        | rand := let
          srand : StdGen × StdGen := stdSplit rand;
          rand1 : StdGen := fst srand;
          rand2 : StdGen := snd srand;
          arg : A := runGen rand1;
          subProp : Property := asProp (prop arg);
          res : Result := runProp subProp rand2;
        in overFailure
          res
          \ {
            | (failure s cs) := failure s (show arg :: cs)
            | s := s
          }
      });

testableFunction :
  {A : Type}
    -> {T : Type}
    -> Showable A
    -> Arbitrary A
    -> Testable T
    -> Testable (A -> T);
testableFunction s@(showable show) (arbitrary g) t@(testable asProp) :=
  testable
    \ {
      | f := forAll s t g f
    };

testableTwoArgFunction :
  {A : Type}
    -> {T : Type}
    -> Showable A
    -> Arbitrary A
    -> Testable (A -> T)
    -> Testable (A -> A -> T);
testableTwoArgFunction s g t := testableFunction s g t;

testableBinaryInt : Testable (Int -> Int -> Bool);
testableBinaryInt :=
  testableTwoArgFunction
    showableInt
    arbitraryInt
    (testableFunction showableInt arbitraryInt testableBool);

quickcheck :
  {P : Type} -> Nat -> Nat -> Testable P -> P -> Result;
quickcheck {P} attemptNum startSeed (testable asProp) p :=
  let
    seeds : List Nat;
    seeds :=
      let
        go : Nat -> List Nat -> List Nat;
        go zero ls := ls;
        go (suc n) ls := go n (startSeed Nat.+ n :: ls);
      in go attemptNum nil;
    runOne : Property -> Nat -> Result;
    runOne prop seed :=
      let
        result : Result := runProp prop (mkStdGen seed);
      in overFailure
        result
        \ {
          | (failure _ cs) := failure seed cs
          | s := s
        };
    runAll : Property -> Result;
    runAll prop := foldMap monoidResult (runOne prop) seeds;
  in runAll (asProp p);

prop-add-sub : Int -> Int -> Bool;
prop-add-sub a b := a == a + b - b;

prop-add-sub-bad : Int -> Int -> Bool;
prop-add-sub-bad a b := a == 2;

terminating
gcd' : Int → Int → Int;
gcd' a b := if (a == 0) b (gcd' (mod b a) a);

gcd : Int → Int → Int;
gcd a b := if (a > b) (gcd' b a) (gcd' a b);

prop-gcd-bad : Int -> Int -> Bool;
prop-gcd-bad a b := gcd a b > 1;

main : IO;
main :=
  readLn
    \ {
      | seed := printStringLn
        (showResult
          (quickcheck
            100
            (stringToNat seed)
            testableBinaryInt
            prop-gcd-bad))
    };
