module Test.QuickCheck;

open import Stdlib.Prelude;
open import Data.List;
open import Data.Monoid;
open import Data.Random;
open import Test.QuickCheck.Property public;
open import Test.QuickCheck.Result public;
open import Test.QuickCheck.Testable public;

quickcheck :
  {Predicate : Type}
    -> Nat
    -> Nat
    -> Testable Predicate
    -> Predicate
    -> Result;
quickcheck attemptNum startSeed t predicate :=
  let
    seeds : List Nat;
    seeds := map ((+) startSeed) (range attemptNum);
    runOne : Property -> Nat -> Result;
    runOne prop seed :=
      let
        result : Result := runProp prop (mkStdGen seed);
      in overFailure
        result
        \ {
          | (fail (failure _ cs)) := fail (failure seed cs)
          | s := s
        };
    runAll : Property -> Result;
    runAll prop := foldMap monoidResult (runOne prop) seeds;
  in runAll (toProp t predicate);
