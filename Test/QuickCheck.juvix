module Test.QuickCheck;

import Stdlib.Prelude open;
import Data.List open;
import Data.Monoid open;
import Data.Random open;
import Test.QuickCheck.Property open public;
import Test.QuickCheck.Result open public;
import Test.QuickCheck.Testable open public;

quickcheck
  : {Predicate : Type}
    -> Nat
    -> Nat
    -> Testable Predicate
    -> Predicate
    -> Result
  | attemptNum startSeed t predicate :=
    let
      seeds : List Nat :=
        map (n in range attemptNum)
          startSeed + n;
      runOne : Property -> Nat -> Result
        | prop seed :=
          let
            result : Result := runProp prop (mkStdGen seed);
          in overFailure result \ {(failure _ cs) := failure seed cs};
      runAll : Property -> Result
        | prop := foldMap monoidResult (runOne prop) seeds;
    in runAll (toProp t predicate);
