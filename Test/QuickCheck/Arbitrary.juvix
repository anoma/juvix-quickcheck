module Test.QuickCheck.Arbitrary;

import Stdlib.Prelude open;
import Data.Random open;
import Test.QuickCheck.Gen open;
import Test.QuickCheck.CoArbitrary open;

-- | A generator associated with a type A
trait
type Arbitrary (A : Type) := mkArbitrary {gen : Gen A};

runArb {A} {{Arbitrary A}} (rand : StdGen) : A :=
  Gen.run Arbitrary.gen rand;

instance
arbitraryNat : Arbitrary Nat :=
  mkArbitrary (mkGen \ {rand := fst (stdNext rand)});

instance
arbitraryInt : Arbitrary Int :=
  mkArbitrary
    (mkGen
      \ {rand :=
        let
          runRand : Pair Nat StdGen := stdNext rand;
          n : Nat := fst runRand;
          isPos : Bool := fst (randBool (snd runRand));
        in ite isPos (ofNat n) (negSuc n)});

instance
arbitraryBool : Arbitrary Bool :=
  mkArbitrary (mkGen \ {rand := fst (randBool rand)});

instance
arbitraryList {A} {{Arbitrary A}} : Arbitrary (List A) :=
  mkArbitrary
    (mkGen
      \ {rand :=
        let
          randSplit : Pair StdGen StdGen := stdSplit rand;
          rand1 : StdGen := fst randSplit;
          rand2 : StdGen := snd randSplit;
          len : Nat := fst (randNat rand1 0 10);
          randList : StdGen -> Nat -> List A
            | _ zero := nil
            | r (suc n) :=
              let
                rSplit : Pair StdGen StdGen := stdSplit r;
                r1 : StdGen := fst rSplit;
                r2 : StdGen := snd rSplit;
              in Gen.run Arbitrary.gen r1 :: randList r2 n;
        in randList rand2 len});

instance
arbitraryFunction
  {A B}
  {{CoArbitrary A}}
  {{Arbitrary B}}
  : Arbitrary (A -> B) :=
  mkArbitrary
    (promote (CoArbitrary.coarbitrary Arbitrary.gen));

instance
arbitraryMaybe {A} {{Arbitrary A}} : Arbitrary (Maybe A) :=
  mkArbitrary
    (mkGen
      \ {rand :=
        let
          randSplit : Pair StdGen StdGen := stdSplit rand;
          rand1 : StdGen := fst randSplit;
          rand2 : StdGen := snd randSplit;
          mkJust : Bool := fst (randBool rand1);
        in if
          | mkJust := Gen.run Arbitrary.gen rand2 |> just
          | else := nothing});

instance
arbitraryResult
  {A B}
  {{Arbitrary A}}
  {{Arbitrary B}}
  : Arbitrary (Result A B) :=
  mkArbitrary
    (mkGen
      \ {rand :=
        let
          randSplit : Pair StdGen StdGen := stdSplit rand;
          rand1 : StdGen := fst randSplit;
          rand2 : StdGen := snd randSplit;
          mkError : Bool := fst (randBool rand1);
        in if
          | mkError := Gen.run Arbitrary.gen rand2 |> error
          | else := Gen.run Arbitrary.gen rand2 |> ok});
