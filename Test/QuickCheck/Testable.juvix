module Test.QuickCheck.Testable;

import Stdlib.Prelude open;
import Data.Random open;
import Test.QuickCheck.Arbitrary open;
import Test.QuickCheck.CoArbitrary open;
import Test.QuickCheck.Result open;
import Test.QuickCheck.Property open;
import Test.QuickCheck.Gen open;

--- A conversion from a Type A to a ;Property;
trait
type Testable (A : Type) :=
  mkTestable {toProp : A -> Property};

forAll
  {A T : Type}
  {{Show A}}
  {{Arbitrary A}}
  {{Testable T}}
  : (A -> T) -> Property
  | prop :=
    mkProperty
      (mkGen
        \ {rand :=
          let
            srand : Pair StdGen StdGen := stdSplit rand;
            rand1 : StdGen := fst srand;
            rand2 : StdGen := snd srand;
            arg : A := Gen.run Arbitrary.gen rand1;
            subProp : Property := Testable.toProp (prop arg);
            res : Result := runProp subProp rand2;
          in overFailure
            res
            \ {f :=
              f@Failure{counterExamples := Show.show arg
                :: counterExamples}}});

instance
testableProperty : Testable Property := mkTestable id;

instance
testableResult : Testable Result :=
  mkTestable \ {r := mkProperty (mkGen (const r))};

instance
testableBool : Testable Bool :=
  let
    toResult : Bool -> Result
      | b := ite b success (failure (mkFailure 0 nil));
  in mkTestable \ {b := Testable.toProp (toResult b)};

instance
testableFunction
  {A T}
  {{Show A}}
  {{Arbitrary A}}
  {{Testable T}}
  : Testable (A -> T) := mkTestable \ {f := forAll f};

instance
showableFunction {A B : Type} : Show (A -> B) :=
  mkShow (const "function");
