module Test.QuickCheck.Outcome;

import Stdlib.Prelude open;
import Data.Monoid open;
import Data.String open;

type Failure :=
  mkFailure {
    seed : Nat;
    counterExamples : List String
  };

type Outcome :=
  | success
  | failure Failure;

isSuccess : Outcome -> Bool
  | success := true
  | (failure _) := false;

showOutcome : Outcome -> String
  | success := "success"
  | (failure mkFailure@{seed; counterExamples}) :=
    "failure "
      ++str "(seed : "
      ++str natToString seed
      ++str " , counterExamples: "
      ++str ("[" ++str intercalate ", " counterExamples ++str "]")
      ++str ")";

instance
showOutcomeI : Show Outcome := mkShow showOutcome;

monoidOutcome : Monoid Outcome :=
  monoid
    success
    \ {
      | x@(failure _) _ := x
      | _ y := y
    };

overFailure : Outcome -> (Failure -> Failure) -> Outcome
  | success _ := success
  | (failure x) f := failure (f x);

allSuccess : List Outcome -> Bool := isSuccess << foldMap monoidOutcome id;
