module Test.QuickCheck.Result;

import Stdlib.Prelude open;
import Data.Monoid open;
import Data.String open;

type Failure :=
  mkFailure {
    seed : Nat;
    counterExamples : List String
  };

type Result :=
  | success
  | failure Failure;

isSuccess : Result -> Bool
  | success := true
  | (failure _) := false;

showResult : Result -> String
  | success := "success"
  | (failure mkFailure@{seed; counterExamples}) :=
    "failure "
      ++str "(seed : "
      ++str natToString seed
      ++str " , counterExamples: "
      ++str ("[" ++str intercalate ", " counterExamples ++str "]")
      ++str ")";

instance
showResultI : Show Result := mkShow showResult;

monoidResult : Monoid Result :=
  monoid
    success
    \ {
      | x@(failure _) _ := x
      | _ y := y
    };

overFailure : Result -> (Failure -> Failure) -> Result
  | success _ := success
  | (failure x) f := failure (f x);

allSuccess : List Result -> Bool :=
  isSuccess << foldMap monoidResult id;
