module Test.QuickCheck.Result;

import Stdlib.Prelude open;
import Data.Monoid open;
import Data.String open;

type Failure :=
  | failure : Nat -> List String -> Failure;

type Result :=
  | success : Result
  | fail : Failure -> Result;

isSuccess : Result -> Bool
  | success := true
  | (fail _) := false;

showResult : Result -> String
  | success := "success"
  | (fail (failure seed cs)) :=
    "failure "
      ++str "(seed : "
      ++str natToString seed
      ++str " , counterExamples: "
      ++str ("[" ++str intercalate ", " cs ++str "]")
      ++str ")";

monoidResult : Monoid Result :=
  monoid
    success
    \ {
      | x@(fail _) _ := x
      | _ y := y
    };

overFailure : Result -> (Failure -> Failure) -> Result
  | success _ := success
  | (fail x) f := fail (f x);

allSuccess : List Result -> Bool :=
  isSuccess âˆ˜ foldMap monoidResult id;
