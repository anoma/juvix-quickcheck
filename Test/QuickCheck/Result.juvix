module Test.QuickCheck.Result;

open import Stdlib.Prelude;
open import Data.Monoid;
open import Data.String;

type Failure :=
  | failure : Nat -> List String -> Failure;

type Result :=
  | success : Result
  | fail : Nat -> List String -> Result;

isSuccess : Result -> Bool;
isSuccess success := true;
isSuccess (fail _ _) := false;

showResult : Result -> String;
showResult success := "success";
showResult (fail seed cs) :=
  "failure "
    ++str "(seed : "
    ++str natToString seed
    ++str " , counterExamples: "
    ++str ("[" ++str intercalate ", " cs ++str "]")
    ++str ")";

monoidResult : Monoid Result;
monoidResult :=
  monoid
    success
    \ {
      | x@(fail _ _) _ := x
      | _ y := y
    };

overFailure : Result -> (Result -> Result) -> Result;
overFailure success _ := success;
overFailure x f := f x;

allSuccess : List Result -> Bool;
allSuccess := isSuccess âˆ˜ foldMap monoidResult id;
