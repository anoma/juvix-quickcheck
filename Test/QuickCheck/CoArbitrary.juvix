module Test.QuickCheck.CoArbitrary;

import Data.Random open;
import Stdlib.Prelude open;
import Test.QuickCheck.Gen open;

-- | A perturbation of a generator associated with a type B
trait
type CoArbitrary (A : Type) :=
  mkCoarbitrary {coarbitrary : {B : Type}
    -> Gen B
    -> A
    -> Gen B};

binaryDigits : Nat -> List Nat
  | n :=
    let
      terminating
      go : Nat -> List Nat
        | n :=
          if (n == 0) nil (mod n 2 :: go (div n 2));
    in reverse (go n);

perturb : Int -> StdGen -> StdGen
  | n rand0 :=
    let
      vary : Bool -> StdGen -> StdGen
        | b g :=
          let
            splitG : StdGen Ã— StdGen := stdSplit g;
          in if b (snd splitG) (fst splitG);
      terminating
      digitsParity : List Bool :=
        map (x in binaryDigits (abs n))
          x == 0;
    in for (rand := vary (n < ofNat 0) rand0) (b in digitsParity)
         vary b rand;

instance
coarbitraryInt : CoArbitrary Int :=
  mkCoarbitrary
    \ {g n := mkGen \ {rand := Gen.run g (perturb n rand)}};

instance
coarbitraryListInt : CoArbitrary (List Int) :=
  mkCoarbitrary
    \ {g xs :=
      mkGen
        \ {rand := Gen.run g (foldr perturb (perturb 0 rand) xs)}};
