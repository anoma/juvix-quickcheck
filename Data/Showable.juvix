module Data.Showable;

open import Stdlib.Prelude;
open import Data.String;

type Showable (A : Type) :=
  | showable : (A -> String) -> Showable A;

showableList :
  {A : Type} -> Showable A -> Showable (List A);
showableList (showable show) :=
  showable
    \ {
      | xs := "[" ++str intercalate ", " (map show xs) ++str "]"
    };

showableFunction :
  {A : Type} -> {B : Type} -> Showable (A -> B);
showableFunction := showable (const "function");

showableBool : Showable Bool;
showableBool :=
  showable
    \ {
      | true := "true"
      | false := "false"
    };

showableInt : Showable Int;
showableInt := showable intToString;

showableNat : Showable Nat;
showableNat := showable natToString;

showableString : Showable String;
showableString :=
  showable
    \ {
      | s := "\"" ++str s ++str "\""
    };
