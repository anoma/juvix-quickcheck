-- | An implementation of a random number generator from Efficient and Portable Combined Random Number Generators by Pierre L'Ecuyer.
-- This uses the portable generator for 16-bit computers due to the Int size limitation of th current Juvix compiler.
-- The period of the generator is approximately 8 x 10^12 with 32362 possible output values.
module Data.Random;

import Stdlib.Prelude open;

type StdGen := stdGen : Nat -> Nat -> Nat -> StdGen;

stdGenS1 : StdGen -> Nat
  | (stdGen s1 _ _) := s1;

stdGenS2 : StdGen -> Nat
  | (stdGen _ s2 _) := s2;

stdGenS3 : StdGen -> Nat
  | (stdGen _ _ s3) := s3;

k1 : Nat := 32362;

k2 : Nat := 31726;

k3 : Nat := 31656;

mkStdGen : Nat -> StdGen
  | seed :=
    let
      q1 : Nat := div seed k1;
      s1 : Nat := mod seed k1;
      q2 : Nat := div q1 k2;
      s2 : Nat := mod q1 k2;
      s3 : Nat := mod q2 k3;
    in stdGen (s1 + 1) (s2 + 1) (s3 + 1);

stdRange : Pair Nat Nat := 1, k1;

stdNext : StdGen -> Pair Nat StdGen
  | (stdGen s1Nat s2Nat s3Nat) :=
    let
      s1 : Int := ofNat s1Nat;
      s2 : Int := ofNat s2Nat;
      s3 : Int := ofNat s3Nat;
      k : Int := div s1 (ofNat 206);
      s1' : Int := ofNat 157 * (s1 - k * ofNat 206) - k * ofNat 21;
      s1'' : Int := ite (s1' < ofNat 0) (s1' + ofNat 32363) s1';
      k' : Int := div s2 (ofNat 217);
      s2' : Int := ofNat 146 * (s2 - k' * ofNat 217) - k' * ofNat 45;
      s2'' : Int := ite (s2' < ofNat 0) (s2' + ofNat 31727) s2';
      k'' : Int := div s3 (ofNat 222);
      s3' : Int := ofNat 142 * (s3 - k' * ofNat 222) - k' * ofNat 133;
      s3'' : Int := ite (s2' < ofNat 0) (s2' + ofNat 31657) s3';
      z : Int := s1'' - s2'';
      z' : Int := ite (z > ofNat 706) (z - ofNat 32362) z;
      z'' : Int := ite (z' < ofNat 1) (z' + ofNat 32362) (mod z (ofNat k1));
    in toNat z'', stdGen (toNat s1'') (toNat s2'') (toNat s3'');

stdSplit : StdGen -> Pair StdGen StdGen
  | g@(stdGen s1 s2 s3) :=
    let
      newS1 : Nat := ite (s1 == k1) 1 (s1 + 1);
      newS2 : Nat := ite (s2 == 1) k2 (sub s2 1);
      newS3 : Nat := ite (s3 == k3) 1 (s3 + 1);
      newG : StdGen := snd (stdNext g);
      leftG : StdGen := stdGen newS1 (stdGenS2 newG) (stdGenS3 newG);
      rightG : StdGen := stdGen (stdGenS1 newG) newS2 newS3;
    in leftG, rightG;

randNatAux : StdGen -> Nat -> Nat -> Nat -> Pair Nat StdGen -> Pair Nat StdGen
  | g genLo genMag :=
    let
      terminating
      go : Nat -> Pair Nat StdGen -> Pair Nat StdGen
        | zero p@(v, g) := p
        | r'@(suc _) (v, g) :=
          let
            n : Pair Nat StdGen := stdNext g;
            v' : Nat := v * genMag + sub (fst n) genLo;
          in go (div r' (sub genMag 1)) (v', snd n);
    in go;

randNat : StdGen -> Nat -> Nat -> Pair Nat StdGen
  | g lo hi :=
    let
      genLo : Nat := fst stdRange;
      genHi : Nat := snd stdRange;
      genMag : Nat := sub genHi genLo + 1;
      q : Nat := 1000;
      k : Nat := sub hi lo + 1;
      tgtMag : Nat := k * q;
      x : Pair Nat StdGen := randNatAux g genLo genMag tgtMag (0, g);
      v : Nat := fst x;
      g' : StdGen := snd x;
      v' : Nat := lo + mod v k;
    in v', g';

randBool : StdGen -> Pair Bool StdGen
  | g :=
    let
      x : Pair Nat StdGen := randNat g 0 1;
      b : Bool := fst x == 1;
    in b, snd x;

run : Nat -> StdGen -> IO
  | zero _ := printString ""
  | (suc n) g :=
    let
      next : Pair Nat StdGen := randNat g 0 100;
      b : Nat := fst next;
      g' : StdGen := snd next;
    in printNatLn b >>> run n g';

main : IO :=
  let
    go : String -> IO
      | s :=
        let
          seed : Nat := stringToNat s;
          initG : StdGen := mkStdGen seed;
        in run 100 initG;
  in readLn go;
