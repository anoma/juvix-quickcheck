-- | An implementation of a random number generator from Efficient and Portable Combined Random Number Generators by Pierre L'Ecuyer.
-- This uses the portable generator for 16-bit computers due to the Int size limitation of th current Juvix compiler.
-- The period of the generator is approximately 8 x 10^12 with 32362 possible output values.
module Data.Random;

import Stdlib.Prelude open;
import Stdlib.Data.Nat.Ord open;

import Stdlib.Data.Int as Int open using {Int};

import Stdlib.Data.Int.Ord as Int;

type StdGen :=
  | stdGen : Nat -> Nat -> Nat -> StdGen;

stdGenS1 : StdGen -> Nat;
stdGenS1 (stdGen s1 _ _) := s1;

stdGenS2 : StdGen -> Nat;
stdGenS2 (stdGen _ s2 _) := s2;

stdGenS3 : StdGen -> Nat;
stdGenS3 (stdGen _ _ s3) := s3;

k1 : Nat := 32362;

k2 : Nat := 31726;

k3 : Nat := 31656;

mkStdGen : Nat -> StdGen;
mkStdGen seed :=
  let
    q1 : Nat := div seed k1;
    s1 : Nat := mod seed k1;
    q2 : Nat := div q1 k2;
    s2 : Nat := mod q1 k2;
    s3 : Nat := mod q2 k3;
  in stdGen (s1 + 1) (s2 + 1) (s3 + 1);

stdRange : Nat × Nat;
stdRange := 1, k1;

stdNext : StdGen -> Nat × StdGen;
stdNext (stdGen s1Nat s2Nat s3Nat) :=
  let
    s1 : Int := ofNat s1Nat;
    s2 : Int := ofNat s2Nat;
    s3 : Int := ofNat s3Nat;
    k : Int := Int.div s1 206;
    s1' :
      Int := 157 Int.* (s1 Int.- k Int.* 206) Int.- k Int.* 21;
    s1'' : Int := if (s1' Int.< 0) (s1' Int.+ 32363) s1';
    k' : Int := Int.div s2 217;
    s2' :
      Int :=
        146 Int.* (s2 Int.- k' Int.* 217) Int.- k' Int.* 45;
    s2'' : Int := if (s2' Int.< 0) (s2' Int.+ 31727) s2';
    k'' : Int := Int.div s3 222;
    s3' :
      Int :=
        142 Int.* (s3 Int.- k' Int.* 222) Int.- k' Int.* 133;
    s3'' : Int := if (s2' Int.< 0) (s2' Int.+ 31657) s3';
    z : Int := s1'' Int.- s2'';
    z' : Int := if (z Int.> 706) (z Int.- 32362) z;
    z'' :
      Int :=
        if (z' Int.< 1) (z' Int.+ 32362) (Int.mod z (ofNat k1));
  in toNat z'', stdGen (toNat s1'') (toNat s2'') (toNat s3'');

stdSplit : StdGen -> StdGen × StdGen;
stdSplit g@(stdGen s1 s2 s3) :=
  let
    newS1 : Nat := if (s1 == k1) 1 (s1 + 1);
    newS2 : Nat := if (s2 == 1) k2 (sub s2 1);
    newS3 : Nat := if (s3 == k3) 1 (s3 + 1);
    newG : StdGen := snd (stdNext g);
    leftG :
      StdGen := stdGen newS1 (stdGenS2 newG) (stdGenS3 newG);
    rightG : StdGen := stdGen (stdGenS1 newG) newS2 newS3;
  in leftG, rightG;

randNatAux :
  StdGen
    -> Nat
    -> Nat
    -> Nat
    -> Nat × StdGen
    -> Nat × StdGen;
randNatAux g genLo genMag :=
  let
    terminating
    go : Nat -> Nat × StdGen -> Nat × StdGen;
    go zero p@(v, g) := p;
    go r'@(suc _) (v, g) :=
      let
        n : Nat × StdGen := stdNext g;
        v' : Nat := v * genMag + sub (fst n) genLo;
      in go (div r' (sub genMag 1)) (v', snd n);
  in go;

randNat : StdGen -> Nat -> Nat -> Nat × StdGen;
randNat g lo hi :=
  let
    genLo : Nat := fst stdRange;
    genHi : Nat := snd stdRange;
    genMag : Nat := sub genHi genLo + 1;
    q : Nat := 1000;
    k : Nat := sub hi lo + 1;
    tgtMag : Nat := k * q;
    x : Nat × StdGen := randNatAux g genLo genMag tgtMag (0, g);
    v : Nat := fst x;
    g' : StdGen := snd x;
    v' : Nat := lo + mod v k;
  in v', g';

randBool : StdGen -> Bool × StdGen;
randBool g :=
  let
    x : Nat × StdGen := randNat g 0 1;
    b : Bool := fst x == 1;
  in b, snd x;

run : Nat -> StdGen -> IO;
run zero _ := printString "";
run (suc n) g :=
  let
    next : Nat × StdGen := randNat g 0 100;
    b : Nat := fst next;
    g' : StdGen := snd next;
  in printNatLn b >> run n g';

main : IO;
main :=
  let
    go : String -> IO;
    go s :=
      let
        seed : Nat := stringToNat s;
        initG : StdGen := mkStdGen seed;
      in run 100 initG;
  in readLn go;
