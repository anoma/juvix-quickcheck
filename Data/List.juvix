module Data.List;

open import Stdlib.Prelude;
open import Stdlib.Trait.Ord;

import Stdlib.Data.Int.Ord as Int;

rangeStep : Nat -> Nat -> List Nat;
rangeStep step n :=
  let
    go : Nat -> List Nat -> List Nat;
    go zero xs := xs;
    go (suc n) xs := go n (n * step :: xs);
  in go n nil;

unzipWith :
  {A : Type}
    -> {B : Type}
    -> {C : Type}
    -> (A -> B -> C)
    -> List (A × B)
    -> List C;
unzipWith := map ∘ uncurry;

range : Nat -> List Nat;
range n := rangeStep 1 n;

qsHelper : {A : Type} → A → List A × List A → List A;
qsHelper a (l, r) := l ++ (a :: nil) ++ r;

sortInt : List Int -> List Int;
sortInt := quickSort Int.compare;

eqListInt : List Int -> List Int -> Bool;
eqListInt nil nil := true;
eqListInt (x :: _) nil := false;
eqListInt nil (x :: _) := false;
eqListInt (x :: xs) (y :: ys) :=
  x Int.== y && eqListInt xs ys;
