module Data.List;

import Stdlib.Prelude open;

import Stdlib.Data.Int.Ord as Int;

rangeStep : Nat -> Nat -> List Nat
  | step n :=
    let
      go : Nat -> List Nat -> List Nat
        | zero xs := xs
        | (suc n) xs := go n (n * step :: xs);
    in go n nil;

unzipWith
  : {A : Type}
    -> {B : Type}
    -> {C : Type}
    -> (A -> B -> C)
    -> List (Pair A B)
    -> List C := map âˆ˜ uncurry;

range : Nat -> List Nat
  | n := rangeStep 1 n;

sortInt : List Int -> List Int := quickSort;

eqListInt : List Int -> List Int -> Bool
  | nil nil := true
  | (x :: _) nil := false
  | nil (x :: _) := false
  | (x :: xs) (y :: ys) := x Int.== y && eqListInt xs ys;
