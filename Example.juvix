module Example;

import Stdlib.Prelude open hiding {+};

import Stdlib.Data.Nat.Ord as Nat;
import Stdlib.Data.Nat as Nat;

import Stdlib.Data.Int.Ord open;
import Stdlib.Data.Int open;
import Data.List open;
import Data.String open;
import Data.Int open;

import Test.QuickCheckTest as QC;

prop-reverseDoesNotChangeLength : List Int -> Bool
  | xs := length (reverse xs) Nat.== length xs;

prop-reverseReverseIsIdentity : List Int -> Bool
  | xs := eqListInt xs (reverse (reverse xs));

prop-tailLengthOneLess : List Int -> Bool
  | xs :=
    null xs
      || ofNat (length (tail xs)) == intSubNat (length xs) 1;

prop-splitAtRecombine : Nat -> List Int -> Bool
  | n xs :=
    case splitAt n xs
      | lhs, rhs := eqListInt xs (lhs ++ rhs);

prop-mergeSumLengths : List Int -> List Int -> Bool
  | xs ys :=
    length xs Nat.+ length ys
      Nat.== length (merge IntTraits.Ord xs ys);

prop-partition : List Int -> (Int -> Bool) -> Bool
  | xs p :=
    case partition p xs
      | lhs, rhs :=
        all p lhs
          && not (any p rhs)
          && eqListInt (sortInt xs) (sortInt (lhs ++ rhs));

prop-distributive : Int -> Int -> (Int -> Int) -> Bool
  | a b f := f (a + b) == f a + f b;

prop-add-sub : Int -> Int -> Bool
  | a b := a == a + b - b;

prop-add-sub-bad : Int -> Int -> Bool
  | a b := a == 2;

prop-gcd-bad : Int -> Int -> Bool
  | a b := gcd a b > 1;

gcdNoCoprimeTest : QC.Test :=
  QC.mkTest
    QC.testableBinaryInt
    "no integers are coprime"
    prop-gcd-bad;

partitionTest : QC.Test :=
  QC.mkTest
    QC.testableListIntHofIntBool
    "partition: recombination of the output equals the input"
    prop-partition;

testDistributive : QC.Test :=
  QC.mkTest
    QC.testableIntIntHofIntInt
    "all functions are distributive over +"
    prop-distributive;

reverseLengthTest : QC.Test :=
  QC.mkTest
    QC.testableListInt
    "reverse preserves length"
    prop-reverseDoesNotChangeLength;

reverseReverseIdTest : QC.Test :=
  QC.mkTest
    QC.testableListInt
    "reverse of reverse is identity"
    prop-reverseReverseIsIdentity;

splitAtRecombineTest : QC.Test :=
  QC.mkTest
    QC.testableNatListInt
    "splitAt: recombination of the output is equal to the input list"
    prop-splitAtRecombine;

mergeSumLengthsTest : QC.Test :=
  QC.mkTest
    QC.testableListIntListInt
    "merge: sum of the lengths of input lists is equal to the length of output list"
    prop-mergeSumLengths;

tailLengthOneLessTest : QC.Test :=
  QC.mkTest
    QC.testableListInt
    "tail: length of output is one less than input unless empty"
    prop-tailLengthOneLess;

main : IO :=
  readLn
    \ {seed :=
      QC.runTestsIO
        100
        (stringToNat seed)
        (partitionTest
          :: reverseLengthTest
          :: reverseReverseIdTest
          :: splitAtRecombineTest
          :: mergeSumLengthsTest
          :: tailLengthOneLessTest
          :: nil)};
