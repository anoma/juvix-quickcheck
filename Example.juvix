module Example;

open import Stdlib.Prelude hiding {+};
open import Stdlib.Data.Int.Ord;
open import Stdlib.Data.Int;
open import Test.QuickCheck;
open import Data.List;
open import Data.Int;

prop-partition : List Int -> (Int -> Bool) -> Bool;
prop-partition xs p :=
  case partition p xs
    | lhs, rhs :=
      all p lhs
        && not (any p rhs)
        && eqListInt (sortInt xs) (sortInt (lhs ++ rhs));

prop-distributive : Int -> Int -> (Int -> Int) -> Bool;
prop-distributive a b f := f (a + b) == f a + f b;

prop-add-sub : Int -> Int -> Bool;
prop-add-sub a b := a == a + b - b;

prop-add-sub-bad : Int -> Int -> Bool;
prop-add-sub-bad a b := a == 2;

prop-gcd-bad : Int -> Int -> Bool;
prop-gcd-bad a b := gcd a b > 1;

main : IO;
main :=
  readLn
    \ {
      | seed := printStringLn
        (showResult
          (quickcheck
            100
            (stringToNat seed)
            testableBinaryInt
            prop-gcd-bad))
    };

main'' : IO;
main'' :=
  readLn
    \ {
      | seed := printStringLn
        (showResult
          (quickcheck
            100
            (stringToNat seed)
            testableListIntHofIntBool
            prop-partition))
    };

main' : IO;
main' :=
  readLn
    \ {
      | seed := printStringLn
        (showResult
          (quickcheck
            100
            (stringToNat seed)
            testableIntIntHofIntInt
            prop-distributive))
    };
