module Example;

open import Stdlib.Prelude hiding {+};
open import Stdlib.Data.Int.Ord;
open import Stdlib.Data.Int;
open import Data.List;
open import Data.String;
open import Data.Int;

import Test.QuickCheckTest as QC;

prop-partition : List Int -> (Int -> Bool) -> Bool;
prop-partition xs p :=
  case partition p xs
    | lhs, rhs :=
      all p lhs
        && not (any p rhs)
        && eqListInt (sortInt xs) (sortInt (lhs ++ rhs));

prop-distributive : Int -> Int -> (Int -> Int) -> Bool;
prop-distributive a b f := f (a + b) == f a + f b;

prop-add-sub : Int -> Int -> Bool;
prop-add-sub a b := a == a + b - b;

prop-add-sub-bad : Int -> Int -> Bool;
prop-add-sub-bad a b := a == 2;

prop-gcd-bad : Int -> Int -> Bool;
prop-gcd-bad a b := gcd a b > 1;

gcdNoCoprimeTest : QC.Test;
gcdNoCoprimeTest :=
  QC.mkTest
    QC.testableBinaryInt
    "no integers are coprime"
    prop-gcd-bad;

partitionTest : QC.Test;
partitionTest :=
  QC.mkTest
    QC.testableListIntHofIntBool
    "partition"
    prop-partition;

testDistributive : QC.Test;
testDistributive :=
  QC.mkTest
    QC.testableIntIntHofIntInt
    "all functions are distributive over +"
    prop-distributive;

main : IO;
main :=
  readLn
    \ {
      | seed := QC.runTestsIO
        100
        (stringToNat seed)
        (gcdNoCoprimeTest
          :: partitionTest
          :: testDistributive
          :: nil)
    };
